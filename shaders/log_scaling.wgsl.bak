// Here we do log scaling on the frequency axis.

fn fs_user(uvv: vec2<f32>) -> vec4<f32> {
	var uv = uvv;
    var xPos: f32;
    var fft: f32;

    if (uv.y > 0.5){

        //linear sampling
        xPos = uv.x;
        fft = getLevel(xPos);

    }else{

        //crop bottom and top of range
        uv.x = mix(0.3,0.7, uv.x);

        //logarithmic sampling
        xPos = toLog(uv.x, 0.01, 1.0);

        fft = fft_sample(xPos, 0);

        //boost contrast
        fft = pow(fft,3.0);

        //boost gain
        fft *= 1.5;

        //contrast / brightness
        let contrast = 1.4;
        let brightness = 0.;
        fft = (fft - 0.5) * contrast + 0.5 + brightness;

    }

    let color = vec3<f32>(fft);
    return color;
}
/*

	Linear vs Logarithmic FFT

	some good test songs:

	https://soundcloud.com/kraddy/winning
	https://soundcloud.com/grey-houston/soothing-piano-melody
	https://soundcloud.com/pointpoint/life-in-gr

*/

//from https://stackoverflow.com/questions/35799286
fn toLog(value: f32, min: f32, max: f32) -> f32{
	let exp = (value-min) / (max-min);
	return min * pow(max/min, exp);
}
